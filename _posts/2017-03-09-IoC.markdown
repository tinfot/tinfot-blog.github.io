---
layout: post
title:  "IoC"
date:   2017-11-02 15:01:24 +0800
categories: PHP
tags: PHP Laravel
---

首先我们新建一个超人类
```php
class Superman{}
```

然后我们新建一个能力类
```php
class Power{

    /**
     * 能力值
     */
    protected $ability;

    /**
     * 能力范围或距离
     */
    protected $range;

    public function __contruct($ability, $range){
        $this->ability = $ability;
        $this->range = $range;
    }
}
```

在超人的构造函数中实例化能力类，然后把返回的对象赋值给超人的属性中
```php
class Supermam{

    protected $power;

    public function __construct(){
        $this->power = new Power(999, 100);
    }
}
```

那么我们会看到超人和超能力之间产生了一个依赖的关系，如果不在Superman类中实例化能力的话，就无法将能力对象赋值到超人的能力(power)属性上

我们试想一下如果依赖太多的时候是怎样的场景

```php
class Flight{
    protected $speed;
    protected $holdtime;

    public function __contruct($speed, $holdtime){
        $this->speed = $speed;
        $this->holdtime = $holdtime;
    }
}
```

```php
class Force{
    protected $force;

    public function __construct($force){
        $this->force = $force;
    }
}
```

```php
class Shot{
    protected $atk;
    protected $range;
    protected $limit;

    public function __construct($atk,$range,$limit){
        $this->atk = $atk;
        $this->range = $range;
        $this->limit = $limit;
    }
}
```

我们在上面建了3个类，Shot(射击类)、Flight(飞行类)、Force(力量类)
现在我们把这3个类加到超人类中

```php
class Superman{
    protected $power;

    public function __construct(){
        $this->power = new Flight(9,100);
        //$this->power = new Force(50);
        //$this->shot = new Shot(200, 500, 4);

        /*$this->power = [
            new Force(50),
            new Shot(200,500,4);
        ];*/
    }
}
```

当我们需要创建一些有针对性能力的超人的时候，我需要把一些不需要的实例注释掉，这样很不灵活

我们可以想想办法怎么解决这个问题呢？

### 工厂模式

我们新建一个超人模具工厂类

```php
class SupermanModuleFactory{
    public function makeModule($moduleName, $options){
        switch($moduleName){
            case 'Flight': return new Flight($options[0], $options[1]);

            case 'Force': return new Force($options[0]);

            case 'Shot': return new Shot($options[0],$options[1],$options[2]);
        }
    }
}
```

那我们现在让超人使用这个模具工厂
```php
class Superman{
    protected $power;

    public function __construct(){
        $factory = new SupermanModuleFactory();

        $this->power = $factory->makeModule('Flight',[9,100]);
        //$this->power = $factory->makeModule('Force',[50]);
        //$this->power = $factory->makeModule('Shot',[99,50,2]);

        /*$this->power = [
            $factory->makeModule('Force',[45]);
            $factory->makeModule('Shot',[99,50,2]);
        ];*/
    }
}
```
看，我们在模具工厂类中实例化了很多类，然后再超人类中实例化工厂类，然后根据传入参数，工厂类会返回对应的实例化对象。

我们稍微修改一下超人类
```php
class Superman{
    protected $power;

    public function __construct(array $modules){
        $factory = new SuperModuleFactory;

        foreach($modules as $moduleName => $moduleOptions){
            $this->power[] = $factory->makeModule($moduleName, $moduleOptions);
        }
    }
}

$superman = new Superman([
    'Flight' => [9,100],
    'Shot' => [99,50, 2]
]);
```

现在我们能让超人自由的插入3个超能力模组了，但是如果修改超能力模组或者增加新的能力的时候怎么办呢？我们需要修改超人模具工厂类


### 依赖注入
照上面来看的话，其实依赖并没有接触，我们只是把超人类中对其他超能力的依赖变成了对超人模具工厂的依赖

如果我们需要增加工厂类的能力模块
```php
class SupermanModuleFactory{
    public function makeModule($moduleName,$options){
        switch($moduleName){
            case 'Flight': return new Flight($options[0], $options[1]);
            case 'Force': return new Force($options[0]);
            case 'Shot': return new Shot($options[0],$options[1],$options[2]);
            case 'more': return ...;
            case 'and more': return ...;
            case 'and more': return ...;
        }
    }
}
```
以上的情况我们可以看到，如果不断的增加新的模组，我们将无限量的修改工厂类

所以我们需要将这一部分解放出来，因为工厂没办法为全部模具都进行生产，毕竟众人拾柴火焰高，我们将大家的创意都集中起来后将能生产更厉害的能力

那么要保证每个人做出来的模具都能被超人使用，就必须要保证是有一定的标准的，例如超人的手只有那么大，你造了个一栋楼那么大的刀，他也拿不动啊

So.我们需要一个接口来约束
```php
interface SupermanModuleInterface{
    public function activate(array $target){

    }
}
```

这样我们就定义了一个接口标准，所有模具生产商必须要遵守这个标准

OK，那我们来创造一个符合模具标准的能力类
```php
class XPower implements SupermanModuleInterface{

    protected $target;

    public function activate(array $target){
        $this->target = $target;
    }
}
```

```php
class UltraBomb implements SupermanModuleInterface{
    protected $target;

    public function activate(array $target){
        $this->target = $target;
    }
}
```

然后我们需要在超人类中加上标准限制，不能谁做的模具都接进来，必须要符合标准的才接入
```php
class Superman{
    protected $module;

    public function __construct(SupermanModuleInterface $module){
        $this->module = $module;
    }
}
```

典型的依赖注入
```php
$supermanModule = new XPower();
$superman = new Superman($supermanModule);
```

高级工厂 IoC容器

```php
class Container{
    protected $binds;
    protected $instances;

    public function bind($abstract, $concrete){
        if($concrete instanceof Closure){
            $this->binds[$abstract] = $concrete;
        }else{
            $this->instances[$abstract] = $concrete;
        }
    }

    public function make($abstract, $parameters = []){
        if(isset($this->instances[$abstract])){
            return $this->instances[$abstract];
        }
        array_unshift($parameters, $this);

        return call_user_func_array($this->binds[$abstract], $parameters);
    }
}
```

看看我们怎么使用它
```php
//实例化一个容器类
$container = new Container();

$container->bind('superman',function($container,$moduleName){
    return new Superman($container->make($moduleName));
});
//将会调用到Container的bind方法
/*$container->binds['superman'] = function($container, $moduleName){
    return new Superman($container->make($moduleName);
}*/

$container->bind('xpower',function($container){
    return new Xpower();
});
//将会调用到Container的bind方法
/*$container->binds['xpower'] = function($container){
    return new Xpower();
}*/

$container->bind('ultrabomb', function($container){
    return new UltraBomb();
});
//将会调用到Container的bind方法
/*$container->binds['ultrabomb'] = function($container){
    return new UltraBomb();
}*/

$superman_1 = $container->make('superman', ['xpower']);
//
$superman_2 = $container->make('superman',['ultrabomb']);
$superman_3 = $container->make('superman',['xpower']);
```