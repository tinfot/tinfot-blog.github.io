---
layout: post
title:  "设计模式原则"
date:   2017-06-27 15:00:24 +0800
categories: 设计模式
tags: 设计模式
---

## 开闭原则
* 软件模块应该对扩展开发，对修改关闭。在程序需要进行新增功能的时候，不去修改原有的代码，而是使用新增代码来实现一个热插拔的效果，使程序易于维护和升级。
* 热插拔:灵活增删功能，不影响原有功能


## 里氏代换原则
* 继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为，规范其实现抽象化的具体步骤。

* 举例: 车类，原来是一种交通工具，它的衍生类有小轿车、卡车、大巴车等等，如果用衍生类替换了基类的基本方法，例如把交通工具变成了食用品，会影响软件单位的功能，这个时候就不符合里氏代换原则。


## 依赖倒转原则
* 针对接口变成，不针对实现编程
* 举例:以计算机为例子，计算机由CPU、主板、内存、硬盘和显卡等等，这些硬件都是是针对接口而设计的，所以厂商只要按照这个接口来设计就能使用。如果计算机是针对实现来设计的，那么主板和内存都要对应到某个品牌，那么我们需要换内存的时候连主板也要换了，设计要降低模块之间的耦合度。


## 接口隔离原则
* 使用多个隔离的接口，优于使用单个接口。
* 举例: 登录和注册属于用户模块下的2个接口，要优于只有一个用户接口，这样提高了程序设计的灵活性。


## 迪米特法则
* 一个实体应当尽量少于其他实体之间发生相互作用，应该让系统功能模块相对独立。
* 举例: 一个类里面的public属性或者方法越多，修改时涉及的面也就越大，变更之时可以能会引发更大的风险，应该尽量降低类与类之间的耦合度，减少对其他类的依赖。


## 单一职责原则
* 一个类只负责一个功能领域中的响应职责，简单来说: 每个类应该只有一个能引起它变化的原因，降低类的复杂性，提供可读性和可维护性。

---

### 高内聚，低耦合是什么？

* 内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。
* 耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。
